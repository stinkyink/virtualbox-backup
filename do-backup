#!/usr/bin/env ruby

require 'csv'
require 'fileutils'
require 'optparse'
require 'tmpdir'

require 'bundler/setup'
require 'fog'

trap :INT, :EXIT

SCRIPT_DIR = File.dirname(__FILE__)
CONFIG_FILE = SCRIPT_DIR + '/config.yaml'

CONFIG = YAML.load_file(CONFIG_FILE)

OUT_DIR = CONFIG['local']['out-dir']

COMMANDS = CONFIG['local']['commands']
VBOX_MANAGE = COMMANDS['vbox-manage']
LVM = COMMANDS['lvm']
MOUNT = COMMANDS['mount']
UMOUNT = COMMANDS['umount']

require_relative 'lib/helpers'

require_relative 'lib/offsite_backup'
require_relative 'lib/virtual_hard_disk'
require_relative 'lib/virtual_machine'
require_relative 'lib/virtual_machine_backup'

require_relative 'lib/offsite_backends/backend'
require_relative 'lib/offsite_backends/glacier_backend'
require_relative 'lib/offsite_backends/s3_backend'
require_relative 'lib/offsite_backends/test_backend'

$options = OpenStruct.new
$options.do_offsite = true
$options.quiet = false

OptionParser.new {|opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [options]"
  opts.separator ''
  opts.separator 'Options:'

  opts.on('-h', '--help', 'Show this message') do
    puts opts
    exit
  end
  opts.on('-q', '--quiet', 'Suppress output') do |v|
    $options.quiet = true
  end
  opts.on('-n', '--no-offsite', "Don't perform off-site backup") do |v|
    $options.do_offsite = false
  end
}.parse!

if not Dir.exists?(OUT_DIR)
  STDERR.puts "ERROR: Output directory does not exist: #{OUT_DIR}"
  exit!
end

class Tool
  def self.run!
    virtual_machines = VirtualMachine.find(CONFIG['virtual-machines']['include'])
    @backups = virtual_machines.map {|vm| VirtualMachineBackup.new(vm) }

    do_local_backups!
    do_offsite_backups!  if $options.do_offsite
  end

  private

  def self.do_local_backups!
    @backups.each(&:do_backup!)
  end

  def self.do_offsite_backups!
    exclude_offsite_uuids =
      VirtualMachine.find(CONFIG['virtual-machines']['offsite-exclude']).
        map(&:uuid)
    @backups.each do |backup|
      next  if exclude_offsite_uuids.include?(backup.virtual_machine.uuid)
      if backup.error?
        STDERR.puts "WARNING: #{backup.virtual_machine}: Skipping offsite backup " +
                    "due to previous errors."
        next
      end
      description =
        backup.time.strftime("%Y-%m-%d_%H:%M") + " #{backup.virtual_machine}"
      offsite_backup = OffsiteBackup.new(backup.target_dir, description)
      offsite_backup.push_offsite!
      offsite_backup.remove_old_backups!
    end
  end
end

Tool.run!
